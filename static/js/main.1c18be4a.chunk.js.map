{"version":3,"sources":["CustomIndicator.js","Gallery.js","App.js","serviceWorker.js","index.js"],"names":["CustomIndicator","_this","this","react_default","a","createElement","className","props","items","map","elem","index","activeIndex","key","onClick","handleClick","height","src","url","alt","caption","React","Component","Gallery","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","next","bind","assertThisInitialized","previous","goToIndex","onExiting","onExited","animating","nextIndex","images","length","setState","newIndex","_this2","imageList","image","CarouselItem","CarouselCaption","captionHeader","Carousel","interval","src_CustomIndicator_0","CarouselControl","direction","directionText","onClickHandler","App","src_Gallery","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c18be4a.chunk.js","sourcesContent":["import React from 'react';\nimport './CustomIndicator.css'\n\nclass CustomIndicator extends React.Component {\n    render() {\n        return (\n            <div className='custom-indicator'>\n                {\n\n                    this.props.items.map((elem, index) =>\n                        <img\n                            className={this.props.activeIndex == index ? 'custom-indicator-active' : ''}\n                            key={index} onClick={() => this.props.handleClick(index)} height=\"150px\" src={elem.url}\n                            alt={elem.caption}/>\n                    )}\n            </div>\n        );\n    }\n}\n\nexport default CustomIndicator;","import React, {Component} from 'react';\nimport {Carousel, CarouselItem, CarouselControl, CarouselCaption} from 'reactstrap';\nimport CustomIndicator from './CustomIndicator'\n\nclass Gallery extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeIndex: 0\n        };\n        this.next = this.next.bind(this);\n        this.previous = this.previous.bind(this);\n        this.goToIndex = this.goToIndex.bind(this);\n        this.onExiting = this.onExiting.bind(this);\n        this.onExited = this.onExited.bind(this);\n\n    }\n\n    onExiting() {\n        this.animating = true;\n    }\n\n    onExited() {\n        this.animating = false;\n    }\n\n    next() {\n        if (this.animating) return;\n        const nextIndex = this.state.activeIndex === this.props.images.length - 1 ? 0 : this.state.activeIndex + 1;\n        this.setState({activeIndex: nextIndex});\n    }\n\n    previous() {\n        if (this.animating) return;\n        const nextIndex = this.state.activeIndex === 0 ? this.props.images.length - 1 : this.state.activeIndex - 1;\n        this.setState({activeIndex: nextIndex});\n    }\n\n    goToIndex(newIndex) {\n        if (this.animating) return;\n        this.setState({activeIndex: newIndex});\n    }\n\n    render() {\n        let imageList = this.props.images.map((image) => {\n            return (\n                <CarouselItem\n                    onExiting={this.onExiting}\n                    onExited={this.onExited}\n                    key={image.url}>\n                    <img height=\"400px\" src={image.url} alt={image.caption}/>\n                    <CarouselCaption captionHeader={image.caption}/>\n                </CarouselItem>\n            )\n        });\n        return (\n            <div>\n                <Carousel\n                    interval={false}\n                    activeIndex={this.state.activeIndex}\n                    next={this.next}\n                    previous={this.previous}\n                >\n                    <CustomIndicator\n                        items={this.props.images}\n                        activeIndex={this.state.activeIndex}\n                        handleClick={this.goToIndex}\n                    />\n\n                    {imageList}\n                    <CarouselControl direction=\"prev\" directionText=\"Previous\" onClickHandler={this.previous}/>\n                    <CarouselControl direction=\"next\" directionText=\"Next\" onClickHandler={this.next}/>\n\n                </Carousel>\n            </div>\n\n        );\n    }\n\n}\n\nexport default Gallery;\n","import React from 'react';\nimport './App.css';\nimport Gallery from './Gallery'\n\nfunction App() {\n  const images = [{url:\"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",caption:\"Bulbasaur\"},\n    {url:\"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",caption:\"Charmander\"},\n    {url:\"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",caption:\"Squirtle\"},\n    {url:\"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/050.png\",caption:\"Diglet\"},\n    {url:\"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/012.png\",caption:\"Butterfree\"},\n    {url:\"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/039.png\",caption:\"Jigglypuff\"},\n    {url:\"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/093.png\",caption:\"Haunter\"},\n    {url:\"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/120.png\",caption:\"Staryu\"},\n    {url:\"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/088.png\",caption:\"Grimer\"}];\n  return (\n    <div className=\"App\">\n      <Gallery images={images}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}